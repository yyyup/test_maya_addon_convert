# -*- coding: utf-8 -*-
#
# Zootools documentation build configuration file, created by
# sphinx-quickstart on Wed Jul 11 16:19:35 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
from sphinx.ext.autodoc.mock import _MockObject
from zoo.core import api
from zoo.preferences import core as prefcore
cfg = api.currentConfig()
prefcore.setInstance(prefcore.PreferenceManager(cfg))

_ZOOTOOLS_NAME = u"Zootools Pro"


class MockExt(_MockObject):
    """Updates the sphinx mock object so we can support different object call requirements
    ie. maya
    """
    __display_name__ = "MockExt"

    def __mul__(self, other):
        return MockExt()

    def __rmul__(self, other):
        return MockExt()

    def __pow__(self, other):
        return MockExt()

    def __div__(self, other):
        return MockExt()

    def __add__(self, other):
        return MockExt()

    def __radd__(self, other):
        return MockExt()

    def __int__(self):
        return 0

    def __float__(self):
        return 0.0

    def __str__(self):
        return ""

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc',
              'sphinx.ext.intersphinx',
              'sphinx.ext.todo',
              'sphinx.ext.coverage',
              #'sphinx.ext.viewcode',
              'sphinx.ext.githubpages',
              "sphinxcontrib.youtube",
              "sphinx_tabs.tabs"
              ]
# mock all Qt related modules
sys.modules.update((mod_name, MockExt()) for mod_name in {
    "zoovendor.Qt",
    "zoovendor.Qt.QtGui",
    "zoovendor.Qt.QtCore",
    "zoovendor.Qt.QtWidgets",
    "zoovendor.Qt.QtGui",
    "zoovendor.Qt.QtCompat",
    "shiboken2",
    "shiboken2.shiboken2",
    "PySide2.QtGui",
    "PySide2.QtCore",
    "PySide2.QtWidgets",
    "PySide2.QtGui"
})

autodoc_mock_imports = []
add_module_names = False
autodoc_member_order = "bysource"
autodoc_default_options = {
    'member-order': 'bysource',
    'undoc-members': True,
    'exclude-members': ''
}
# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = _ZOOTOOLS_NAME
copyright = u'2020, David Sparrow'
author = u'David Sparrow'
html_logo = "./resources/zooToolsZ.png"
# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = cfg.buildVersion()
# The full version, including alpha/beta/rc tags.
release = cfg.buildVersion()

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
pygments_style = 'default'

# Options for HTML output
# -----------------------

import sphinx_rtd_theme

html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    'canonical_url': '',
    'analytics_id': '',
    'logo_only': False,
    'display_version': True,
    'prev_next_buttons_location': 'bottom',
    'style_external_links': False,
    # Toc options
    'collapse_navigation': False,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'includehidden': True,
    'titles_only': True
}

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
        'donate.html',
    ]
}

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = _ZOOTOOLS_NAME + "Doc"

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, u'Zootools.tex', _ZOOTOOLS_NAME + " Documentation",
     u'David Sparrow', 'manual'),
]

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, _ZOOTOOLS_NAME, _ZOOTOOLS_NAME + " Documentation",
     [author], 1)
]

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, _ZOOTOOLS_NAME, _ZOOTOOLS_NAME + " Documentation",
     author, _ZOOTOOLS_NAME, 'One line description of project.',
     'Miscellaneous'),
]

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    "python": ("https://docs.python.org/2", None),
}

rst_prolog = """
.. raw:: html

    <em><style> .colorlightgrayitalic {color:lightslategray} </style></em>

.. role:: colorlightgrayitalic

"""
# post run all package docs scripts to allow packages to extend our config
# or to mock objects
for pkg in cfg.resolver.cache.values():
    configScript = pkg.documentation.get("configScript", "")
    pkg.resolveEnvPath("documentationConfigScript", [configScript])
    configScript = pkg.resolvedEnv["documentationConfigScript"].values[0]
    if not os.path.exists(configScript):
        continue
    try:
        with open(configScript, "r") as f:
            exec(compile(f.read(), f.name, "exec"), globals(),
                 locals())
    except Exception:
        raise
