# -*- coding: utf-8 -*-
#
# HiveArtistui_maya documentation build configuration file, created by
# sphinx-quickstart on Wed Jul 11 16:19:35 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

from sphinx.ext.autodoc import importer

sys.path.insert(0, os.path.abspath('.'))
root = os.path.abspath(os.path.join("..", "..", ".."))
os.environ["ZOO_PACKAGE_REPOS"] = root
os.environ["ZOO_PRESET_PATH"] = os.path.join(root, "zootools_version.config")
sys.path.append(root)

import packageresolver

resolved, cfg = packageresolver.resolveFromConfigFile(os.getenv("ZOO_PRESET_PATH"), bakeEnv=True)


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc',
              'sphinx.ext.intersphinx',
              'sphinx.ext.todo',
              'sphinx.ext.coverage',
              'sphinx.ext.viewcode',
              'sphinx.ext.githubpages',
              ]
autodoc_mock_imports = ["maya"]


class MockExt(object):
    """Hack(sphinx.ext.autodoc.importer) to fix cached maya and qt calls in modules, simple extending the class
    doesn't work with cmds but seems fine with api.

     the sphinx mock class to handle QtCore.Qt.UserRole operators
    """

    def __new__(cls, *args, **kwargs):
        # type: (Any, Any) -> Any
        if len(args) == 3 and isinstance(args[1], tuple) and args[1][-1].__class__ is cls:
            # subclassing MockObject
            return type(args[0], (MockExt,), args[2], **kwargs)  # type: ignore
        else:
            return super(MockExt, cls).__new__(cls)

    def __init__(self, *args, **kwargs):
        # type: (Any, Any) -> None
        self.__qualname__ = ''

    def __len__(self):
        # type: () -> int
        return 0

    def __contains__(self, key):
        # type: (str) -> bool
        return False

    def __iter__(self):
        # type: () -> Iterator
        return iter([])

    def __mro_entries__(self, bases):
        # type: (Tuple) -> Tuple
        return bases

    def __getitem__(self, key):
        # type: (str) -> MockExt
        return self

    def __getattr__(self, key):
        # type: (str) -> MockExt
        return self

    def __call__(self, *args, **kw):
        # type: (Any, Any) -> Any
        if args and type(args[0]) in [importer.FunctionType, importer.MethodType]:
            # Appears to be a decorator, pass through unchanged
            return args[0]
        return self

    def __mul__(self, other):
        return MockExt()

    def __rmul__(self, other):
        return MockExt()

    def __pow__(self, other):
        return MockExt()

    def __div__(self, other):
        return MockExt()

    def __add__(self, other):
        return MockExt()

    def __radd__(self, other):
        return MockExt()


# Hack(sphinx.ext.autodoc.importer)
importer._MockObject = MockExt

sys.modules.update((mod_name, MockExt()) for mod_name in ["qt", "shiboken2", "shiboken", "shiboken.wrapInstance",
                                                          "shiboken2.wrapInstance"])
autodoc_mock_imports = ['maya']
# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Hive Artist UI'
copyright = u'2018, David Sparrow'
author = u'Keen Foong'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u'1.0.0'
# The full version, including alpha/beta/rc tags.
release = u'1.0.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
pygments_style = 'sphinx'


# Options for HTML output
# -----------------------

import sphinx_rtd_theme
html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}


# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
        'donate.html',
    ]
}

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'HiveArtistuidoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'HiveArtistui.tex', u'HiveArtistui Documentation',
     u'David Sparrow', 'manual'),
]

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'HiveArtistui', u'HiveArtistui Documentation',
     [author], 1)
]

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'HiveArtistui', u'HiveArtistui Documentation',
     author, 'HiveArtistui', 'One line description of project.',
     'Miscellaneous'),
]

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}
